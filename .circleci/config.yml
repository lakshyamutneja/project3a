version: 2.1

orbs:
    slack: circleci/slack@4.1.3
    aws-cli: circleci/aws-cli@1.3.0

commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            # Add parameter here
            workflow-id:
                type: string
                default: ${CIRCLE_WORKFLOW_ID:0:7}
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                      # Your code here
                      aws s3 rb s3://udapeople-<< parameters.workflow-id >> --force  
                      aws cloudformation delete-stack \
                          --stack-name "backend-stack-<< parameters.workflow-id >>"
                      aws cloudformation delete-stack \
                          --stack-name "frontend-stack-<< parameters.workflow-id >>"

    write-env-variables:
        description: Writes environment variables to env file
        steps:
            - run:
                name: Write to .env file
                command: |
                    ls -la
                    echo ENVIROMENT=development > "backend/.env"
                    echo TYPEORM_CONNECTION=postgres >> "backend/.env"
                    echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
                    echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
                    echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
                    echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
                    echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
                    echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
                    echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
                    echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"


    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        # parameters:
        steps:
            # Trigger rollback jobs if the smoke tests or any following jobs fail.
            # Revert the last migration (IF a new migration was applied) on the database to that it goes back to the way it was before. You can use that value you saved in MemStash.io to know if you should revert any migrations.
            - run:
                  name: Revert migrations
                  when: on_fail
                  command: |
                      # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
                      export SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
                      if(( $SUCCESS==1 )); 
                      then
                      cd ~/project/backend
                      npm install
                      npm run migrations:revert
                      fi

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-build]
            - run:
                  name: Build front-end
                  command: |
                      cd frontend
                      npm i
                      npm run build
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-build
            - slack/notify:
                  event: fail
                  template: basic_fail_1

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-build]
            - run:
                  name: Back-end build
                  command: |
                      cd backend
                      npm i
                      npm run build
            - save_cache:
                  paths:
                      - backend/node_modules
                  key: backend-build
            - save_cache:
                  paths:
                      - "backend/dist"
                  key: backend-dist
            - slack/notify:
                  event: fail
                  template: basic_fail_1

    test-frontend:
        docker:
            # Docker image here
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys:
                      - frontend-build
            # Your job code here
            - run:
                  name: Frontend test
                  command: |
                      cd frontend
                      npm install
                      npm build
                      npm run test
            - slack/notify:
                  event: fail
                  template: basic_fail_1

    test-backend:
        docker:
            # Docker image here
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys:
                      - backend-build
            # Your job code here
            - run:
                  name: Backend test
                  command: |
                      cd backend
                      npm install
                      npm build
                      npm run test
            - slack/notify:
                  event: fail
                  template: basic_fail_1

    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
            # Docker image here
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys:
                      - frontend-build
            # Your job code here
            - run:
                  name: Frontend security scan
                  command: |
                      cd frontend
                      npm audit fix --audit-level=critical --force
                      npm install
                      npm audit --audit-level=critical
            - slack/notify:
                  event: fail
                  template: basic_fail_1
            - slack/notify:
                  event: pass
                  template: success_tagged_deploy_1

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
            # Docker image here
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                  keys:
                      - backend-build
            # Your job code here
            - run:
                  name: Backend security check
                  command: |
                      cd backend
                      npm audit fix --audit-level=critical --force
                      npm install
                      npm audit --audit-level=critical
            - slack/notify:
                  event: fail
                  template: basic_fail_1

    deploy-infrastructure:
        docker:
            # Docker image here that supports AWS CLI
            - image: cimg/base:2020.01
        steps:
            # Checkout code from git
            - checkout
            - aws-cli/setup
            - add_ssh_keys:
                  fingerprints:
                      - "ac:5c:72:b4:ce:18:74:3c:ac:63:db:7b:da:ea:e4:c5"
            - run:
                  name: Ensure back-end infrastructure exists
                  command: |
                      aws cloudformation deploy \
                          --template-file .circleci/files/backend.yml \
                          --tags project=udapeople \
                          --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
                          --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
            - run:
                  name: Ensure front-end infrastructure exist
                  command: |
                      aws cloudformation deploy \
                          --template-file .circleci/files/frontend.yml \
                          --tags project=udapeople \
                          --stack-name "frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
                          --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
            - run:
                  name: Add back-end ip to ansible inventory
                  command: |
                      # Your code here
                      echo "Adding backend ip to inventory"
                      aws ec2 describe-instances \
                          --query 'Reservations[*].Instances[*].PublicIpAddress' \
                          --filters "Name=tag:project,Values=udapeople" \
                          --output text >> .circleci/ansible/inventory.txt
                      cat .circleci/ansible/inventory.txt
            - persist_to_workspace:
                  root: ~/
                  paths:
                      - project/.circleci/ansible/inventory.txt
            # Here's where you will add some code to rollback on failure
            - destroy-environment

    configure-infrastructure:
        docker:
            # Docker image here that supports Ansible
            - image: python:3.7-alpine3.11
        steps:
            - checkout
            # Add ssh keys with fingerprint
            - add_ssh_keys:
                  fingerprints:
                      - "ac:5c:72:b4:ce:18:74:3c:ac:63:db:7b:da:ea:e4:c5"
            # attach workspace
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      # Your code here
                      apk add --update ansible
                      echo "Ansible inventories >> Requires for the next job"
                      cat .circleci/ansible/inventory.txt
            - write-env-variables
            - run:
                  name: Configure server
                  no_output_timeout: 15m
                  command: |
                      echo "Print directory"
                      ls -la
                      ansible-playbook -i .circleci/ansible/inventory.txt \
                      .circleci/ansible/configure-server.yml
            # Here's where you will add some code to rollback on failure
            - run:
                  name: Install AWS CLI for rollback
                  when: on_fail
                  command: |
                      apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
            - destroy-environment

    run-migrations:
        docker:
            # Docker image here that supports NodeJS
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            - aws-cli/setup
            - restore_cache:
                  keys:
                      - "backend-build"
            - run:
                  name: Run migrations
                  command: |
                      # Your code here check later
                      cd backend
                      npm run migrations > migration.log
                      export migration_status=$(cat migration.log | grep -c "has been executed successfully")
            - run:
                  name: Send migration results to memstash
                  command: |
                      # Your code here
                      if [ $migration_status > 0 ] 
                      then
                        curl -H "Content-Type: text/plain" \
                            -H "token: ${CIRCLE_WORKFLOW_ID}" \
                            --request PUT --data "1" \
                            https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
                        else
                            echo "No migrassion ran"
                      fi
            # Here's where you will add some code to rollback on failure
            - revert-migrations
            - destroy-environment

    deploy-frontend:
        docker:
            # Docker image here that supports AWS CLI
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            - aws-cli/setup
            # attach workspace
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      # your code here
                      cd frontend
                      npm install
            - run:
                  name: Get backend url
                  command: |
                      # your code here
                      export API_URL="http://$(sed -n 2p .circleci/ansible/inventory.txt):3030"
                      echo "http://$(sed -n 2p .circleci/ansible/inventory.txt):3030"
                      echo ENVIRONMENT=production > "frontend/.env"
                      echo NODE_ENV=production >> "frontend/.env"
                      echo API_URL=http://$(sed -n 2p .circleci/ansible/inventory.txt):3030 >> "frontend/.env"
                      cat frontend/.env
                      cat .circleci/ansible/inventory.txt
            - run:
                  name: Build frontend
                  command: |
                      cd frontend
                      npm run build
            - run:
                  name: Deploy frontend objects
                  command: |
                      # your code here
                      aws s3 cp --recursive frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
            # Here's where you will add some code to rollback on failure
            - revert-migrations
            - destroy-environment

    deploy-backend:
        docker:
            - image: python:3.7-alpine3.11
            # Docker image here that supports Ansible
        steps:
            # Checkout code from git
            - checkout
            # Add ssh keys with fingerprint
            - add_ssh_keys:
                  fingerprints:
                      - "ac:5c:72:b4:ce:18:74:3c:ac:63:db:7b:da:ea:e4:c5"
            # attach workspace
            - attach_workspace:
                  at: ~/
            - run:
                  name: Install dependencies
                  command: |
                      # your code here
                      apk add --update ansible openssh-client tar gzip
            - restore_cache:
                  keys:
                      - "backend-dist"
            - write-env-variables
            - run:
                  name: Deploy backend
                  no_output_timeout: 30m
                  command: |
                      export ANSIBLE_HOST_KEY_CHECKING=False
                      ansible-playbook -i .circleci/ansible/inventory.txt \
                      .circleci/ansible/deploy-backend.yml
            - run:
                  name: Install AWS CLI for rollback
                  when: on_fail
                  command: |
                      apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
            # Here's where you will add some code to rollback on failure
            - revert-migrations
            - destroy-environment

    smoke-test:
        docker:
            # Lightweight Docker image
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            - aws-cli/setup
            - add_ssh_keys:
                  fingerprints:
                      - "ac:5c:72:b4:ce:18:74:3c:ac:63:db:7b:da:ea:e4:c5"
            - attach_workspace:
                  at: ~/
            - run:
                  name: Get backend url
                  command: |
                      # your code here
                      export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
            - run:
                  name: Backend smoke test.
                  command: |
                      # your code here.
                      echo "Printing Backend Url"
                      echo $(sed -n 2p .circleci/ansible/inventory.txt)
                      echo "Curling > $(sed -n 2p .circleci/ansible/inventory.txt):3030/api/status"
                      curl http://$(sed -n 2p .circleci/ansible/inventory.txt):3030/api/status
                      if curl -s http://$(sed -n 2p .circleci/ansible/inventory.txt):3030/api/status
                      then
                        exit 0
                      else
                        exit 1
                      fi
            - run:
                  name: Frontend smoke test.
                  command: |
                      # your code here
                      URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
                      echo $URL
                      if curl -s ${URL} | grep "Welcome"
                      then
                        exit 0
                      else
                        exit 1
                      fi
            # Here's where you will add some code to rollback on failure
            - revert-migrations
            - destroy-environment

    cloudfront-update:
        docker:
            - image: circleci/node:13.8.0
            # Docker image here that supports AWS CLI
        steps:
            # Checkout code from git
            - checkout
            - aws-cli/setup
            - run:
                  name: Install dependencies
                  command: |
                      # your code here
            - run:
                  name: Update cloudfront distribution
                  command: |
                      # your code here
                      aws cloudformation update-stack \
                      --use-previous-template \
                      --stack-name "udapeople-cloudfront" \
                      --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} \
            # Here's where you will add some code to rollback on failure
            - revert-migrations
            - destroy-environment

    cleanup:
        docker:
            # Docker image here
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            - aws-cli/setup
            - run:
                  name: Get old stack and old workflow id
                  command: |
                      # your code here
                      export OldWorkflowID=$(curl -H "token: tamjid" --request GET \
                      https://api.memstash.io/values/persist_workflow_id)
                      export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
                      echo "Old id ${OldWorkflowID}"
                      echo "New id ${CIRCLE_WORKFLOW_ID:0:7}"
                      echo ${STACKS}
            - run:
                  name: Save current workflow id
                  command: |
                      curl -H "Content-Type: text/plain" \
                      -H "token: tamjid" \
                      --request PUT --data "${CIRCLE_WORKFLOW_ID:0:7}" \
                      https://api.memstash.io/values/persist_workflow_id
            - run:
                  name: Remove old stacks and files
                  command: |
                      if [ "${OldWorkflowID}" != "" ]
                        then
                            aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                            aws cloudformation delete-stack \
                            --stack-name "backend-stack-${OldWorkflowID}"
                            aws cloudformation delete-stack \
                            --stack-name "frontend-stack-${OldWorkflowID}"
                        else
                            echo "Do Nothing"  
                      fi
            - revert-migrations
            - destroy-environment

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                  requires: [build-frontend]
            - test-backend:
                  requires: [build-backend]
            - scan-backend:
                  requires: [build-backend]
            - scan-frontend:
                  requires: [build-frontend]
            - deploy-infrastructure:
                  requires:
                      [test-frontend, test-backend, scan-frontend, scan-backend]
                  filters:
                      branches:
                          only: [main]
            - configure-infrastructure:
                  requires: [deploy-infrastructure]
            - run-migrations:
                  requires: [configure-infrastructure]
            - deploy-frontend:
                  requires: [run-migrations]
            - deploy-backend:
                  requires: [run-migrations]
            - smoke-test:
                  requires: [deploy-backend, deploy-frontend]
            - cloudfront-update:
                  requires: [smoke-test]
            - cleanup:
                  requires: [cloudfront-update]

# Env variables not set in prod machine
# Builds are not properly deployed
# Thus can not run the application